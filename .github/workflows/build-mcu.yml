name: Build STM32 MCU Firmware

on:
  push:
    branches: [ main, develop, feat/* ]
    paths:
      - 'mcu/**'
      - '.github/workflows/build-mcu.yml'
  pull_request:
    branches: [ main, develop, feat/* ]
    paths:
      - 'mcu/**'
      - '.github/workflows/build-mcu.yml'

jobs:
  build-stm32:
    name: Build STM32F103 Firmware
    runs-on: ubuntu-latest

    strategy:
      matrix:
        config:
#          - name: "Debug Build"
#            build_type: "Debug"
#            debug: 1
          - name: "Release Build"
            build_type: "Release"
            debug: 0
        target:
          - name: "bootloader"
            target: "bootloader"
          - name: "app"
            target: "app"
#          - name: "legacy"
#            target: "legacy"

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-depth: 0

    - name: Install ARM Toolchain and Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          gcc-arm-none-eabi \
          binutils-arm-none-eabi \
          libnewlib-arm-none-eabi \
          libstdc++-arm-none-eabi-newlib \
          make \
          cmake \
          build-essential

    - name: Verify Toolchain Installation
      run: |
        arm-none-eabi-gcc --version
        arm-none-eabi-objcopy --version
        cmake --version
        echo 'int main() { return 0; }' > test.c
        arm-none-eabi-gcc -mcpu=cortex-m3 -mthumb -c test.c -o test.o
        rm -f test.c test.o

    - name: Build with CMake
      working-directory: mcu
      run: |
        chmod +x cmake-build.sh
        if [ "${{ matrix.config.build_type }}" = "Release" ]; then
          ./cmake-build.sh build ${{ matrix.target.target }}
        else
          ./cmake-build.sh build ${{ matrix.target.target }}
        fi

    - name: Check CMake Build Artifacts
      working-directory: mcu
      run: |
        echo "CMake build artifacts:"
        ./cmake-build.sh status

    - name: Upload CMake Firmware Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: stm32-cmake-${{ matrix.target.target }}-${{ matrix.config.build_type }}-${{ github.sha }}
        path: |
          mcu/chis_flash_burner/build/${{ matrix.target.target }}/**/*.elf
          mcu/chis_flash_burner/build/${{ matrix.target.target }}/**/*.hex
          mcu/chis_flash_burner/build/${{ matrix.target.target }}/**/*.bin
          mcu/chis_flash_burner/build/${{ matrix.target.target }}/**/*.map
        retention-days: 30

  # Static analysis job
  static-analysis:
    name: Static Code Analysis
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Install Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y cppcheck clang-format

    - name: Run CPPCheck
      working-directory: mcu/chis_flash_burner
      run: |
        cppcheck --enable=all --force --xml --xml-version=2 \
          --suppress=missingIncludeSystem \
          --suppress=unusedFunction \
          --suppress=unmatchedSuppression \
          Core/Src/ 2> cppcheck-report.xml || true

    - name: Check Code Format
      working-directory: mcu/chis_flash_burner
      run: |
        echo "Checking code formatting..."
        find Core/Src -name "*.c" -o -name "*.h" | xargs clang-format --dry-run --Werror || {
          echo "Code formatting issues found. Please run clang-format on your code."
          exit 1
        }

    - name: Upload Analysis Results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: static-analysis-${{ github.sha }}
        path: |
          mcu/chis_flash_burner/cppcheck-report.xml
        retention-days: 7

  # Security scan job
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Run Semgrep
      uses: returntocorp/semgrep-action@v1
      with:
        config: >-
          p/security-audit
          p/secrets
          p/c
