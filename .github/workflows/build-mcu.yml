name: Build STM32 MCU Firmware

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'mcu/**'
      - '.github/workflows/build-mcu.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'mcu/**'
      - '.github/workflows/build-mcu.yml'

jobs:
  build-stm32:
    name: Build STM32F103 Firmware
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        config:
          - name: "Debug Build"
            build_type: "Debug"
            debug: 1
          - name: "Release Build"
            build_type: "Release"
            debug: 0
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-depth: 0

    - name: Install ARM Toolchain and Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          gcc-arm-none-eabi \
          binutils-arm-none-eabi \
          libnewlib-arm-none-eabi \
          libstdc++-arm-none-eabi-newlib \
          make \
          cmake \
          build-essential

    - name: Verify Toolchain Installation
      run: |
        arm-none-eabi-gcc --version
        arm-none-eabi-objcopy --version
        make --version
        # Test compilation of a simple program
        echo 'int main() { return 0; }' > test.c
        arm-none-eabi-gcc -mcpu=cortex-m3 -mthumb -c test.c -o test.o
        rm -f test.c test.o

    - name: Set Build Environment
      run: |
        echo "DEBUG=${{ matrix.config.debug }}" >> $GITHUB_ENV
        if [ "${{ matrix.config.build_type }}" = "Release" ]; then
          echo "OPT=-O2" >> $GITHUB_ENV
        else
          echo "OPT=-Og" >> $GITHUB_ENV
        fi

    - name: Setup Build Environment
      working-directory: mcu
      run: |
        ./build.sh setup

    - name: Build Firmware
      working-directory: mcu
      run: |
        if [ "${{ matrix.config.build_type }}" = "Release" ]; then
          ./build.sh build complete release
        else
          ./build.sh build complete debug
        fi

    - name: Check Build Artifacts
      working-directory: mcu/chis_flash_burner
      run: |
        echo "Build artifacts:"
        ls -la build/ || echo "No build directory found"
        if [ -f "build/chis_flash_burner.elf" ]; then
          arm-none-eabi-size build/chis_flash_burner.elf
          arm-none-eabi-objdump -h build/chis_flash_burner.elf
        fi

    - name: Upload Firmware Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: stm32-firmware-${{ matrix.config.build_type }}-${{ github.sha }}
        path: |
          mcu/chis_flash_burner/build/*.elf
          mcu/chis_flash_burner/build/*.hex
          mcu/chis_flash_burner/build/*.bin
          mcu/chis_flash_burner/build/*.map
        retention-days: 30

    - name: Archive Build Logs
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: build-logs-${{ matrix.config.build_type }}-${{ github.sha }}
        path: |
          mcu/chis_flash_burner/build/*.lst
        retention-days: 7

  # Static analysis job
  static-analysis:
    name: Static Code Analysis
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Install Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y cppcheck clang-format

    - name: Run CPPCheck
      working-directory: mcu/chis_flash_burner
      run: |
        cppcheck --enable=all --force --xml --xml-version=2 \
          --suppress=missingIncludeSystem \
          --suppress=unusedFunction \
          --suppress=unmatchedSuppression \
          Core/Src/ 2> cppcheck-report.xml || true

    - name: Check Code Format
      working-directory: mcu/chis_flash_burner
      run: |
        echo "Checking code formatting..."
        find Core/Src -name "*.c" -o -name "*.h" | xargs clang-format --dry-run --Werror || {
          echo "Code formatting issues found. Please run clang-format on your code."
          exit 1
        }

    - name: Upload Analysis Results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: static-analysis-${{ github.sha }}
        path: |
          mcu/chis_flash_burner/cppcheck-report.xml
        retention-days: 7

  # Security scan job
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Run Semgrep
      uses: returntocorp/semgrep-action@v1
      with:
        config: >-
          p/security-audit
          p/secrets
          p/c

  # Notification job
  notify:
    name: Notify Build Status
    runs-on: ubuntu-latest
    needs: [build-stm32]
    if: always() && github.ref == 'refs/heads/main'
    
    steps:
    - name: Notify Success
      if: needs.build-stm32.result == 'success'
      run: |
        echo "✅ STM32 firmware build successful!"
        echo "Commit: ${{ github.sha }}"
        echo "Branch: ${{ github.ref_name }}"

    - name: Notify Failure
      if: needs.build-stm32.result == 'failure'
      run: |
        echo "❌ STM32 firmware build failed!"
        echo "Commit: ${{ github.sha }}"
        echo "Branch: ${{ github.ref_name }}"
        exit 1
